/**
 * Script para verificar la configuraci√≥n de despliegue
 * Ejecutar con: node checkDeployment.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

function checkFile(filePath, description) {
  const fullPath = path.join(__dirname, filePath);
  try {
    fs.accessSync(fullPath, fs.constants.F_OK);
    console.log(`‚úÖ ${description} (${filePath}) existe`);
    return true;
  } catch (err) {
    console.error(`‚ùå ${description} (${filePath}) NO EXISTE`);
    return false;
  }
}

function runCommand(command, description) {
  try {
    console.log(`\nüîÑ Ejecutando: ${command}`);
    const output = execSync(command, { cwd: __dirname, encoding: 'utf8' });
    console.log(`‚úÖ ${description} completado`);
    return true;
  } catch (error) {
    console.error(`‚ùå ${description} fall√≥: ${error.message}`);
    return false;
  }
}

function checkDeployment() {
  console.log('=== VERIFICACI√ìN DE CONFIGURACI√ìN PARA DESPLIEGUE EN RENDER ===');
  console.log('Fecha y hora:', new Date().toISOString());
  
  // Verificar archivos cr√≠ticos
  console.log('\n--- ARCHIVOS CR√çTICOS ---');
  const criticalFiles = [
    { path: 'render.yaml', description: 'Configuraci√≥n de Render' },
    { path: 'backend/server.js', description: 'Servidor backend' },
    { path: 'backend/db.js', description: 'Configuraci√≥n de base de datos' },
    { path: 'backend/initDb.js', description: 'Script de inicializaci√≥n de base de datos' },
    { path: 'backend/checkDbConnection.js', description: 'Script de verificaci√≥n de conexi√≥n a base de datos' },
    { path: 'backend/checkRenderConfig.js', description: 'Script de verificaci√≥n de configuraci√≥n de Render' },
    { path: 'backend/renderInfo.js', description: 'Script de informaci√≥n de Render' },
    { path: 'frontend/index.html', description: 'P√°gina principal del frontend' },
    { path: 'frontend/js/config.js', description: 'Configuraci√≥n del frontend' },
    { path: 'sql/base_datos.sql', description: 'Script SQL de base de datos' },
    { path: 'DEPLOY_RENDER.md', description: 'Documentaci√≥n de despliegue' }
  ];
  
  let missingFiles = 0;
  criticalFiles.forEach(file => {
    if (!checkFile(file.path, file.description)) {
      missingFiles++;
    }
  });
  
  // Verificar configuraci√≥n de Render
  console.log('\n--- CONFIGURACI√ìN DE RENDER ---');
  const renderYamlPath = path.join(__dirname, 'render.yaml');
  try {
    const renderYaml = fs.readFileSync(renderYamlPath, 'utf8');
    
    // Verificar servicios
    if (renderYaml.includes('registrop1-backend')) {
      console.log('‚úÖ Servicio backend configurado en render.yaml');
    } else {
      console.error('‚ùå Servicio backend NO configurado en render.yaml');
    }
    
    if (renderYaml.includes('registrop1-frontend')) {
      console.log('‚úÖ Servicio frontend configurado en render.yaml');
    } else {
      console.error('‚ùå Servicio frontend NO configurado en render.yaml');
    }
    
    if (renderYaml.includes('registrop1-db')) {
      console.log('‚úÖ Base de datos configurada en render.yaml');
    } else {
      console.error('‚ùå Base de datos NO configurada en render.yaml');
    }
    
    // Verificar dependencias
    if (renderYaml.includes('dependsOn')) {
      console.log('‚úÖ Dependencias entre servicios configuradas');
    } else {
      console.error('‚ùå Dependencias entre servicios NO configuradas');
    }
  } catch (err) {
    console.error(`‚ùå No se pudo leer render.yaml: ${err.message}`);
  }
  
  // Verificar configuraci√≥n del frontend
  console.log('\n--- CONFIGURACI√ìN DEL FRONTEND ---');
  const configJsPath = path.join(__dirname, 'frontend', 'js', 'config.js');
  try {
    const configJs = fs.readFileSync(configJsPath, 'utf8');
    
    if (configJs.includes('registrop1-backend.onrender.com')) {
      console.log('‚úÖ Frontend configurado para conectarse al backend en Render');
    } else {
      console.error('‚ùå Frontend NO configurado para conectarse al backend en Render');
    }
  } catch (err) {
    console.error(`‚ùå No se pudo leer config.js: ${err.message}`);
  }
  
  // Ejecutar scripts de verificaci√≥n
  console.log('\n--- EJECUTANDO SCRIPTS DE VERIFICACI√ìN ---');
  runCommand('cd backend && node checkRenderConfig.js', 'Verificaci√≥n de configuraci√≥n de Render');
  runCommand('cd backend && node checkRenderDb.js', 'Verificaci√≥n de configuraci√≥n de base de datos en Render');
  runCommand('cd backend && node checkCors.js', 'Verificaci√≥n de configuraci√≥n CORS');
  runCommand('cd backend && node checkSecurity.js', 'Verificaci√≥n de configuraci√≥n de seguridad');
  runCommand('cd backend && node checkPerformance.js', 'Verificaci√≥n de rendimiento');
  
  // Resumen
  console.log('\n=== RESUMEN DE VERIFICACI√ìN ===');
  if (missingFiles > 0) {
    console.error(`‚ùå Faltan ${missingFiles} archivos cr√≠ticos. Corrige los problemas antes de desplegar.`);
  } else {
    console.log('‚úÖ Todos los archivos cr√≠ticos est√°n presentes.');
  }
  
  console.log('\n--- PR√ìXIMOS PASOS ---');
  console.log('1. Aseg√∫rate de que todos los cambios est√©n confirmados en Git');
  console.log('2. Sube los cambios a GitHub: git push origin master');
  console.log('3. Despliega en Render siguiendo las instrucciones en DEPLOY_RENDER.md');
}

// Ejecutar la verificaci√≥n
checkDeployment();